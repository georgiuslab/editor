1
განსაზღვრეთ ფუნქცია, რომელიც მოცემული არგუმენტიდან (სიიდან) ამოაგდებს მხოლოდ ორნიშნა რიცხვებს.
ფუნქცია განსაზღვრეთ ან სიების კონსტრუქტორის გამოყენებით ან რეკურსიულად. განსაზღვრეთ ფუნქციის ტიპი
და გამოიძახეთ  კონკრეტული მნიშვნელობისთვის.
twoDigitNumbers :: [Int] -> [Int]
twoDigitNumbers [] = []
twoDigitNumbers (x:xs)
  | abs x >= 10 && abs x <= 99 =  twoDigitNumbers xs
  | otherwise                  = x: twoDigitNumbers xs

2
განსაზღვრეთ ფუნქცია, რომელიც მოცემული არგუმენტში (სიაში) დატოვებს მხოლოდ იმ a რიცხვებს, რომლებიც 
აკმაყოფილებენ პირობას: 15<a<40.  ფუნქცია ფუნქცია განსაზღვრეთ ან სიების კონსტრუქტორის გამოყენებით ან 
რეკურსიულად. განსაზღვრეთ ფუნქციის ტიპი და გამოიძახეთ  კონკრეტული მნიშვნელობისთვის. 
filtri :: [Int] -> [Int]
filtri [] = []
filtri (x:xs)
    | x > 15 && x < 40 = x : filtri xs
    | otherwise = filtri xs
 
3
ფუნქცია  fun,  რომელიც  ამოაგდებს  ცარიელ  სტრიქონებს სტრიქონების მოცემული სიიდან. მაგალითად, 
fun  ["", "Hello", "", "", "World!"]  უნდა  დააბრუნოს ["Hello","World!"].  განსაზღვრეთ ფუნქციის 
ტიპი და გამოიძახეთ  კონკრეტული მნიშვნელობისთვის. 
fun :: [String] -> [String]
fun [] = []
fun (x:xs)
    | x == "" = fun xs
    | otherwise = x : fun xs
 
4
განსაზღვრეთ ფუნქცია fun, რომელიც  მოცემული  მთელი რიცხვების  სიიდან ამოშლის  ყველა  კენტ  
რიცხვს.  მაგალითად,  fun [1,4,5,6,10] უნდა დააბრუნოს [4,10].   განსაზღვრეთ ფუნქციის ტიპი და 
გამოიძახეთ  კონკრეტული მნიშვნელობისთვის. 
fun :: [Int] -> [Int]
fun [] = []
fun (x:xs)
    | odd x = fun xs
    | otherwise = x : fun xs
 
5
განსაზღვრეთ ფუნქცია fun,  რომელიც შეცვლის  მოცემულ  სიმბოლოს მეორე სიმბოლოთი. მაგალითად, 
fun ’e’ ’i’ "eigenvalue"  აბრუნებს "iiginvalui". განსაზღვრეთ ფუნქციის ტიპი და გამოიძახეთ 
კონკრეტული მნიშვნელობისთვის. 
fun :: Char -> Char -> String -> String
fun _ _ [] = []
fun a b (x:xs)
    | x == a = b : fun a b xs
    | otherwise = x : fun a b xs
 
6
განსაზღვრეთ ფუნქცია fun, რომელიც აადგილებს მოცემულ სიაში მეზობელ ლუწ და კენტ ადგილას მყოფ
ელემენტებს ელემენტებს. განსაზღვრეთ ფუნქციის ტიპი და გამოიძახეთ  კონკრეტული მნიშვნელობისთვის. 

fun :: [a] -> [a]
fun [] = []
fun [x] = [x]
fun (x:y:xs) = y : x : fun xs
 
7
განსაზღვრეთ ფუნქცია fun, რომელიც  მოცემული  მთელი რიცხვების  სიიდან ამოშლის  ყველა  
7-ის ჯერად  რიცხვს.  მაგალითად,  fun [1,14,5,7,6,10] უნდა დააბრუნოს [1,5,6,10].   
განსაზღვრეთ ფუნქციის ტიპი და გამოიძახეთ  კონკრეტული მნიშვნელობისთვის. 

fun :: [Int] -> [Int]
fun [] = []
fun (x:xs)
    | x `mod` 7 == 0 = fun xs
    | otherwise = x : fun xs
 
8
განსაზღვრეთ ფუნქცია, რომელიც  შესასვლელზე ღებულობს მთელი რიცხვების სიას და აბრუნებს 
სიის ლუწი რიცხვების სიას  გაერთიანებულს  კენტი რიცხვების სიასთან თავდაპირველ სიაში მათი 
თანმიმდევრობის შენარჩუნებით. მაგალითად, fun [1,2,3,4,5,6,7,8,9]=[2,4,6,8,1,3,5,7,9]. 
გამოიყენეთ დამატებითი პარამეტრი. განსაზღვრეთ ფუნქციის ტიპი და გამოიძახეთ კონკრეტული მნიშვნელობისთვის. 
fun :: [Int] -> [Int]
fun xs = helper xs [] []
helper :: [Int] -> [Int] -> [Int] -> [Int]
helper [] evens odds = evens ++ odds
helper (x:xs) evens odds
    | even x = helper xs (evens ++ [x]) odds
    | otherwise = helper xs evens (odds ++ [x])
 
9
განსაზღვრეთ ფუნქცია, რომელიც  შესასვლელზე ღებულობს მთელი რიცხვების სიას და აბრუნებს 
სიის კენტი რიცხვების სიას  გაერთიანებულს  ლუწი რიცხვების სიასთან თავდაპირველ სიაში მათი 
თანმიმდევრობის შენარჩუნებით. მაგალითად, fun [1,2,3,4,5,6,7,8,9]  =  [1,3,5,7,9,2,4,6,8]. 
გამოიყენეთ დამატებითი პარამეტრი.  განსაზღვრეთ ფუნქციის ტიპი და გამოიძახეთ  კონკრეტული 
მნიშვნელობისთვის. 
fun :: [Int] -> [Int]
fun xs = helper xs [] []
helper :: [Int] -> [Int] -> [Int] -> [Int]
helper [] odds evens = reverse odds ++ reverse evens
helper (x:xs) odds evens
    | odd x     = helper xs (x : odds) evens
    | otherwise = helper xs odds (x : evens)
 
10
განსაზღვრეთ ფუნქცია, რომელიც  ორი  სიის  ელემენტებს  შეკრებს. თუ არგუმენტებს სხვადასხვა 
სიგრძე აქვთ, ფუნქციის შედეგი იყოს უფრო გრძელი სიის სიგრძის. მაგალითად,  fun  [1,2,3][4,5]=[5,7,3]. 
განსაზღვრეთ ფუნქციის ტიპი და გამოიძახეთ  კონკრეტული მნიშვნელობისთვის. 
fun :: [Int] -> [Int] -> [Int]
fun [] [] = []
fun xs [] = xs
fun [] ys = ys
fun (x:xs) (y:ys) = (x + y) : fun xs ys
 
11
 განსაზღვრეთ ორი  სიის  ელემენტების  აჯამვის  ფუნქცია.  აბრუნებს  სიას,  რომელიც შედგება 
 პარამეტრი სიების ელემენტების ჯამისგან. თუ არგუმენტებს სხვადასხვა სიგრძე აქვთ, ფუნქციის შედეგი 
 იყოს უფრო მოკლე სიის სიგრძის. მაგალითად, fun [1,2,3,8,3][4,5]=[5,7];  განსაზღვრეთ ფუნქციის 
 ტიპი და გამოიძახეთ  კონკრეტული მნიშვნელობისთვის. 
fun :: [Int] -> [Int] -> [Int]
fun [] _ = []
fun _ [] = []
fun (x:xs) (y:ys) = (x + y) : fun xs ys
 
12
განსაზღვრეთ ფუნქცია, რომელიც  შესასვლელზე ღებულობს მთელი რიცხვების სიას და აბრუნებს სიის 
ლუწ ადგილზე მყოფი რიცხვების სიას  გაერთიანებულს  კენტ ადგილზე მყოფ რიცხვების სიასთან 
თავდაპირველ სიაში მათი თანმიმდევრობის შენარჩუნებით. მაგალითად, fun [3,2,7,4,9,1,6,5,7]=[3,7,9,6,7,2,4,1,5]. 
გამოიყენეთ დამატებითი პარამეტრი. განსაზღვრეთ ფუნქციის ტიპი და გამოიძახეთ კონკრეტული მნიშვნელობისთვის. 
fun :: [Int] -> [Int]
fun xs = helper xs 0 [] []
helper :: [Int] -> Int -> [Int] -> [Int] -> [Int]
helper [] _ evens odds = evens ++ odds
helper (x:xs) i evens odds
    | even i    = helper xs (i+1) (evens ++ [x]) odds
    | otherwise = helper xs (i+1) evens (odds ++ [x])