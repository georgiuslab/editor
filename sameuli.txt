განსაზღვრეთ ფუნქცია, რომელიც  შესასვლელზე ღებულობს  მთელ რიცხვს  n-ს  და  აბრუნებს  1-დან n -მდე
ნატურალური რიცხვის ფაქტორიალების სიას. ფუნქცია განსაზღვრეთ რეკურსიულად და სიების კონსტრუქტორის გამოყენებით.
განსაზღვრეთ ფუნქციის ტიპი და გამოიძახეთ  კონკრეტული მნიშვნელობისთვის. 
პასუხი:
დავწერთ შემდეგს და შევინახავთ ფაილში factorial.hs და ფაილს ჩავტვირთავთ WinGHC-ში
fact :: Integer -> Integer
fact 0 = 1
fact k = k * fact (k - 1)

f :: Integer -> [Integer]
f 0 = []
f n = fact n : f (n - 1)

calculateFact :: Integer -> [Integer]
calculateFact n = reverse (f n)

*Main> :t calculateFact 6
calculateFact 6 :: [Integer]

განსაზღვრეთ ფუნქცია, რომელიც  შესასვლელზე ღებულობს  მთელ რიცხვს  n-ს  და  აბრუნებს კენტი ნატურალური
რიცხვების სიას. ფუნქცია განსაზღვრეთ რეკურსიულად და  სიების კონსტრუქტორის გამოყენებით. განსაზღვრეთ
ფუნქციის ტიპი და გამოიძახეთ  კონკრეტული მნიშვნელობისთვის. 
	პასუხი:
kenti ::Int->[Int]
kenti n=reverse (nf n)

nf n|n==0       = []
    |odd n     = n:nf(n-1)
    |otherwise  = nf(n-1)

*Main> :t kenti
kenti :: Int -> [Int]
*Main> :t kenti 5
kenti 5 :: [Int]

განსაზღვრეთ ფუნქცია, რომელიც  შესასვლელზე ღებულობს  მთელ რიცხვს  n-ს  და  აბრუნებს 1-დან n -მდე
ნატურალური რიცხვის კვადრატების სიას; ფუნქცია განსაზღვრეთ სიების კონსტრუქტორის გამოყენებით. განსაზღვრეთ
ფუნქციის ტიპი და გამოიძახეთ  კონკრეტული მნიშვნელობისთვის. 
პასუხი:
squares :: Int -> [Int]
squares 0 = []
squares n = squares (n - 1) ++ [n * n]
ან
squares n = [x * x | x <- [1..n]]

განსაზღვრეთ ფუნქცია, რომელიც  შესასვლელზე ღებულობს  მთელ რიცხვს  n-ს  და  აბრუნებს 1-დან n -მდე 2-ის
ხარისხების სიას. ფუნქცია განსაზღვრეთ რეკურსიულად და სიების კონსტრუქტორის გამოყენებით. განსაზღვრეთ ფუნქციის
ტიპი და გამოიძახეთ  კონკრეტული მნიშვნელობისთვის. 
პასუხი:
powersOfTwo :: Int -> [Int]
powersOfTwo 0 = []
powersOfTwo n = powersOfTwo (n - 1) ++ [2^n]

--------------------------------------------------

სტანდარტული prelude ფაილის გამოუყენებლად რეკურსიის საშუალებით განსაზღვრეთ ორარგუმენტიანი ფუნქცია,
რომელიც დაადგენს, არის თუ არა მოცემული მნიშვნელობა სიის ელემენტი: განსაზღვრეთ ფუნქციის ტიპი და
გამოიძახეთ  კონკრეტული მნიშვნელობისთვის. 
პასუხი:
   elem1::Eq a=>a->[a]->Bool
elem1 a []=False
elem1 a (s:sx)=if a==s then True else elem1 a sx

სტანდარტული prelude ფაილის გამოუყენებლად რეკურსიის საშუალებით განსაზღვრეთ ორარგუმენტიანი ფუნქცია,
რომელიც გამოყოფს სიის n-ურ ელემენტს. განსაზღვრეთ ფუნქციის ტიპი და გამოიძახეთ  კონკრეტული მნიშვნელობისთვის. 
პასუხი:
getn :: Int -> [a] -> a

getn _ []     = error "სია ცარიელია ან ინდექსი არასწორია"
getn n (h:t)
  | n <= 0    = error "ინდექსი უნდა იყოს 1 ან მეტი"
  | n == 1    = h
  | otherwise = getn (n - 1) t

სტანდარტული prelude ფაილის გამოუყენებლად რეკურსიის საშუალებით  ორარგუმენტიანი ფუნქცია, რომელიც 
შესასვლელზე ღებულობს  მთელ რიცხვს  n-ს  და  სიმბოლოს,  და აბრუნებს სტრიქონს, რომელშიც სიმბოლო
n-ჯერ არის განმეორებული. განსაზღვრეთ ფუნქციის ტიპი და გამოიძახეთ  კონკრეტული მნიშვნელობისთვის. 
ff :: Int -> Char -> String
ff 0 _ = []
ff n ch = ch : ff (n - 1) ch

სტანდარტული prelude ფაილის გამოუყენებლად რეკურსიის საშუალებით განსაზღვრეთ ორარგუმენტიანი ფუნქცია,
რომელიც შექმნის n ერთნაირი ელემენტების სიას. განსაზღვრეთ ფუნქციის ტიპი და გამოიძახეთ  კონკრეტული
მნიშვნელობისთვის. 
პასუხი:
ff :: Int -> a -> [a]
ff 0 _ = []
ff n x = x : ff (n - 1) x

-----------------------------------------------

განსაზღვრეთ ფუნქცია, რომელიც  შესასვლელზე ღებულობს  მთელ რიცხვებს  a-ს  და b-ს და  აბრუნებს a-დან
b -მდე ლუწი  11-ის ჯერადი რიცხვების სიას.  ფუნქცია განსაზღვრეთ ორი გზით: სიების კონსტრუქტორის
გამოყენებით და რეკურსიულად. განსაზღვრეთ ფუნქციის ტიპი და გამოიძახეთ  კონკრეტული მნიშვნელობისთვის. 
	პასუხი:

fun :: Int -> Int -> [Int]
fun a b
  | a > b = []
  | mod a 2 == 0 && mod a 11 == 0 = a : fun (a + 1) b
  | otherwise = fun (a + 1) b

ან

fun2 :: Int -> Int -> [Int]
fun2 a b = [i | i <- [a..b], i `mod` 2 == 0, i `mod` 11 == 0]
 	
განსაზღვრეთ ფუნქცია, რომელიც  შესასვლელზე ღებულობს  მთელ რიცხვებს  n-ს  და m-ს და 
აბრუნებს n-დან m-მდე ლუწი შვიდის  ჯერადი რიცხვების სიას.  ფუნქცია განსაზღვრეთ ორი გზით:
სიების კონსტრუქტორის გამოყენებით და რეკურსიულად. განსაზღვრეთ ფუნქციის ტიპი და გამოიძახეთ 
კონკრეტული მნიშვნელობისთვის. 
პასუხი:
fun2 :: Int -> Int -> [Int]
fun2 n m = [x | x <- [n..m], even x, x `mod` 7 == 0]
ან:
fun :: Int -> Int -> [Int]
fun n m
  | n > m = []
  | even n && mod n 7 == 0 = n : fun (n + 1) m  | otherwise = fun (n + 1) m

განსაზღვრეთ ფუნქცია, რომელიც  შესასვლელზე ღებულობს  მთელ რიცხვებს  n-ს  და m-ს და 
აბრუნებს n-დან m -მდე კენტი სამის ჯერადი რიცხვების სიას.  ფუნქცია განსაზღვრეთ ორი გზით:
სიების კონსტრუქტორის გამოყენებით და რეკურსიულად. განსაზღვრეთ ფუნქციის ტიპი და გამოიძახეთ 
კონკრეტული მნიშვნელობისთვის. 
პასუხი:
fun2 :: Int -> Int -> [Int]
fun2 n m = [x | x <- [n..m], odd x, x `mod` 3 == 0]
ან:
fun :: Int -> Int -> [Int]
fun n m
  | n > m = []
  | odd n && mod n 3 == 0 = n : fun (n + 1) m
  | otherwise = fun (n + 1) m

განსაზღვრეთ ფუნქცია, რომელიც  შესასვლელზე ღებულობს  მთელ რიცხვებს  a-ს  და b-ს და  აბრუნებს
a-დან b -მდე ლუწი ხუთის ჯერადი რიცხვების სიას.  ფუნქცია განსაზღვრეთ ორი გზით: სიების
კონსტრუქტორის გამოყენებით და რეკურსიულად. განსაზღვრეთ ფუნქციის ტიპი და გამოიძახეთ  კონკრეტული
მნიშვნელობისთვის. 
პასუხი:
fun :: Int -> Int -> [Int]
fun a b
  | a > b = []
  | even a && mod a 5 == 0 = a : fun (a + 1) b
  | otherwise = fun (a + 1) b

ან:
fun2 :: Int -> Int -> [Int]
fun2 a b = [x | x <- [a..b], even x, x `mod` 5 == 0]